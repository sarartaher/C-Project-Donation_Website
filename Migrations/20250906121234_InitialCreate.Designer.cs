// <auto-generated />
using System;
using Donation_Website.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Donation_Website.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250906121234_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Donation_Website.Data.AuditLog", b =>
                {
                    b.Property<int>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditLogId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdminUserId")
                        .HasColumnType("int");

                    b.Property<string>("AfterData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeforeData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditLogId");

                    b.HasIndex("AdminUserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Donation_Website.Data.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("UserId", "IsCheckedOut")
                        .IsUnique()
                        .HasFilter("[IsCheckedOut] = 0");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Donation_Website.Data.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FundraiserId")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("FundraiserId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Donation_Website.Data.Donation", b =>
                {
                    b.Property<int>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonationId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FundraiserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DonationId");

                    b.HasIndex("CartId");

                    b.HasIndex("FundraiserId");

                    b.HasIndex("UserId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("Donation_Website.Data.DonationCategory", b =>
                {
                    b.Property<int>("DonationCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonationCategoryId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("DonationCategoryId");

                    b.ToTable("DonationCategories");

                    b.HasData(
                        new
                        {
                            DonationCategoryId = 1,
                            IsActive = true,
                            Name = "Orphanage Support",
                            Priority = 1
                        },
                        new
                        {
                            DonationCategoryId = 2,
                            IsActive = true,
                            Name = "Water in Africa",
                            Priority = 2
                        },
                        new
                        {
                            DonationCategoryId = 3,
                            IsActive = true,
                            Name = "Gaza Relief",
                            Priority = 3
                        },
                        new
                        {
                            DonationCategoryId = 4,
                            IsActive = true,
                            Name = "Old Age Home Care",
                            Priority = 4
                        },
                        new
                        {
                            DonationCategoryId = 5,
                            IsActive = true,
                            Name = "Zakat",
                            Priority = 5
                        });
                });

            modelBuilder.Entity("Donation_Website.Data.Fundraiser", b =>
                {
                    b.Property<int>("FundraiserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundraiserId"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TargetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FundraiserId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Fundraisers");
                });

            modelBuilder.Entity("Donation_Website.Data.FundraiserLiveMonitor", b =>
                {
                    b.Property<int>("FundraiserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastPaymentAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalCollected")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable((string)null);

                    b.ToView("FundraiserLiveMonitor", (string)null);
                });

            modelBuilder.Entity("Donation_Website.Data.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DonationId")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentId");

                    b.HasIndex("DonationId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Donation_Website.Data.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DonationCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.HasIndex("DonationCategoryId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Donation_Website.Data.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId", "ProjectId")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Donation_Website.Data.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Donation_Website.Data.VolunteerAssignment", b =>
                {
                    b.Property<int>("VolunteerAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VolunteerAssignmentId"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Hours")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WorksOfOrganizationId")
                        .HasColumnType("int");

                    b.HasKey("VolunteerAssignmentId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorksOfOrganizationId");

                    b.ToTable("VolunteerAssignments", t =>
                        {
                            t.HasCheckConstraint("CK_VolAssign_Target", "([ProjectId] IS NOT NULL) OR ([WorksOfOrganizationId] IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("Donation_Website.Data.WorksOfOrganization", b =>
                {
                    b.Property<int>("WorksOfOrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorksOfOrganizationId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorksOfOrganizationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("WorksOfOrganizations");
                });

            modelBuilder.Entity("Donation_Website.Data.AuditLog", b =>
                {
                    b.HasOne("Donation_Website.Data.User", "AdminUser")
                        .WithMany("AuditLogs")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdminUser");
                });

            modelBuilder.Entity("Donation_Website.Data.Cart", b =>
                {
                    b.HasOne("Donation_Website.Data.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Donation_Website.Data.CartItem", b =>
                {
                    b.HasOne("Donation_Website.Data.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Donation_Website.Data.Fundraiser", "Fundraiser")
                        .WithMany("CartItems")
                        .HasForeignKey("FundraiserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Fundraiser");
                });

            modelBuilder.Entity("Donation_Website.Data.Donation", b =>
                {
                    b.HasOne("Donation_Website.Data.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId");

                    b.HasOne("Donation_Website.Data.Fundraiser", "Fundraiser")
                        .WithMany("Donations")
                        .HasForeignKey("FundraiserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Donation_Website.Data.User", "User")
                        .WithMany("Donations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Fundraiser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Donation_Website.Data.Fundraiser", b =>
                {
                    b.HasOne("Donation_Website.Data.Project", "Project")
                        .WithMany("Fundraisers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Donation_Website.Data.Payment", b =>
                {
                    b.HasOne("Donation_Website.Data.Donation", "Donation")
                        .WithMany("Payments")
                        .HasForeignKey("DonationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donation");
                });

            modelBuilder.Entity("Donation_Website.Data.Project", b =>
                {
                    b.HasOne("Donation_Website.Data.DonationCategory", "DonationCategory")
                        .WithMany("Projects")
                        .HasForeignKey("DonationCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DonationCategory");
                });

            modelBuilder.Entity("Donation_Website.Data.Review", b =>
                {
                    b.HasOne("Donation_Website.Data.Project", "Project")
                        .WithMany("Reviews")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Donation_Website.Data.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Donation_Website.Data.VolunteerAssignment", b =>
                {
                    b.HasOne("Donation_Website.Data.Project", "Project")
                        .WithMany("VolunteerAssignments")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Donation_Website.Data.User", "User")
                        .WithMany("VolunteerAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Donation_Website.Data.WorksOfOrganization", "WorksOfOrganization")
                        .WithMany("VolunteerAssignments")
                        .HasForeignKey("WorksOfOrganizationId");

                    b.Navigation("Project");

                    b.Navigation("User");

                    b.Navigation("WorksOfOrganization");
                });

            modelBuilder.Entity("Donation_Website.Data.WorksOfOrganization", b =>
                {
                    b.HasOne("Donation_Website.Data.Project", "Project")
                        .WithMany("Works")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Donation_Website.Data.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Donation_Website.Data.Donation", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Donation_Website.Data.DonationCategory", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Donation_Website.Data.Fundraiser", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Donations");
                });

            modelBuilder.Entity("Donation_Website.Data.Project", b =>
                {
                    b.Navigation("Fundraisers");

                    b.Navigation("Reviews");

                    b.Navigation("VolunteerAssignments");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("Donation_Website.Data.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Carts");

                    b.Navigation("Donations");

                    b.Navigation("Reviews");

                    b.Navigation("VolunteerAssignments");
                });

            modelBuilder.Entity("Donation_Website.Data.WorksOfOrganization", b =>
                {
                    b.Navigation("VolunteerAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
